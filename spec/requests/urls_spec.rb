require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe Api::V1::UrlsController, type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Url. As you add validations to Url, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      "long_url": 'https://google.com'
    }
  end

  let(:invalid_attributes) do
    {
      "long_url": 'fakestring'
    }
  end

  let(:valid_headers) do
    {}
  end

  describe 'POST /api/v1/urls/encode' do
    context 'with valid parameters' do
      it 'encode a long Url' do
        expect do
          post '/api/v1/urls/encode',
               params: { url: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Url, :count).by(1)
      end

      it 'renders a JSON response with the short url' do
        post '/api/v1/urls/encode',
             params: { url: valid_attributes }, headers: valid_headers, as: :json

        expect(response).to have_http_status(200)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response.body).to include('short_url')
      end
    end

    context 'with invalid parameters' do
      it 'does not encode a long Url' do
        expect do
          post '/api/v1/urls/encode',
               params: { url: invalid_attributes }, as: :json
        end.to change(Url, :count).by(0)
      end

      it 'renders a JSON response with errors for the new url' do
        post '/api/v1/urls/encode',
             params: { url: invalid_attributes }, headers: valid_headers, as: :json

        expect(response).to have_http_status(400)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response_body['long_url']).to eq ['is invalid']
      end
    end
  end

  describe 'POST /api/v1/urls/decode' do
    context 'with valid parameters' do
      it 'renders a JSON response with the short url' do
        post '/api/v1/urls/encode',
             params: { url: valid_attributes }, headers: valid_headers, as: :json

        expect(response).to have_http_status(200)

        decode_valid_attributes = {
          'short_url' => response_body['short_url']
        }

        post '/api/v1/urls/decode',
             params: { url: decode_valid_attributes }, headers: valid_headers, as: :json

        expect(response).to have_http_status(200)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response_body['long_url']).to eq 'https://google.com'
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the new url' do
        invalid_attributes = {
          'short_url' => 'fakestring'
        }
        post '/api/v1/urls/decode',
             params: { url: invalid_attributes }, headers: valid_headers, as: :json

        expect(response).to have_http_status(400)
        expect(response.content_type).to match(a_string_including('application/json'))
        expect(response_body['short_url']).to eq ['is invalid']
      end
    end
  end

  def response_body
    JSON.parse(response.body)
  end
end
